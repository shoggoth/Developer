//
//  ShareContentUtils.swift
//  iDispense
//
//  Created by Richard Henry on 25/06/2015.
//  Copyright (c) 2015 Optisoft Ltd. All rights reserved.
//

import Foundation

func makeShareMessageFromOrder(_ order: Order) -> [AnyObject] {

    // Make a PDF from the order
    let itemProvider = IDPDFOrderItemProvider(placeholderItem: URL(fileURLWithPath: Bundle.main.path(forResource: "Placeholder", ofType: "pdf")!))
    itemProvider.order = order

    // Provider for the email attachment text
    // Using a URL to nothing in the hope that it will allow some HTML to be substituted if there is an email target.
    let emailProvider = IDEmailTextItemProvider(placeholderItem: URL(string: "") as Any);
    emailProvider.emailItem = makeEmailBodyFromOrder(order);

    return [ itemProvider, emailProvider ]
}

func makeSDCShareMessageFromOrder(_ order: Order) -> [AnyObject] {

    // Make a PDF from the order
    let itemProvider = IDPDFSDCItemProvider(placeholderItem: URL(fileURLWithPath: Bundle.main.path(forResource: "Placeholder", ofType: "pdf")!))
    itemProvider.order = order

    // Provider for the email attachment text
    // Using a URL to nothing in the hope that it will allow some HTML to be substituted if there is an email target.
    let emailProvider = IDEmailTextItemProvider(placeholderItem: URL(string: "") as Any);
    emailProvider.emailItem = makeEmailBodyFromOrder(order);

    return [ itemProvider, emailProvider ]
}

internal func makeEmailSubjectFromOrder(_ order: Order) -> String {
    
    var subject = "Order \(order.prefixedOrderNumber) for \(order.patientFullName())"

    if let pn = IDDispensingDataStore.default().practiceDetails?["practiceName"] as? String, pn != "" { subject += " from \(pn)" }

    return subject
}

internal func makeEmailBodyFromOrder(_ order: Order) -> String {

    var emailString = "<html><body>Please Find attached an order for <b>\(order.patientFullName())</b>.<br />"
    emailString += "<br />Regards,<br />"

    if let practiceDetails = IDDispensingDataStore.default().practiceDetails {

        if let str = practiceDetails["contactName"] as? String, str != "" { emailString += "\(str)<br />" }
        if let str = practiceDetails["practiceName"] as? String, str != "" { emailString += "\(str)<br />" }
        if let str = practiceDetails["address1"] as? String, str != "" { emailString += "\(str)<br />" }
        if let str = practiceDetails["address2"] as? String, str != "" { emailString += "\(str)<br />" }
        if let str = practiceDetails["postCode"] as? String, str != "" { emailString += "\(str)<br />" }
        if let str = practiceDetails["telephoneNumber"] as? String, str != "" { emailString += "\(str)<br />" }
    }

    emailString += "<br />Order generated by <a href='http://www.optisoft.co.uk/software/dispensing/iDispense.aspx'>Optisoft iDispense</a>. "
    if let email = order.supplier?.emailAddress, email != "" { emailString += "<torecipients>\(email)</torecipients>" }
    emailString += "</body></html>"

    return emailString
}
